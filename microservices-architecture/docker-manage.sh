#!/bin/bash

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
show_help() {
    echo "üê≥ Docker Compose —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Tutor Platform"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê] [–û–ü–¶–ò–ò]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  up           –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  down         –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  restart      –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  logs         –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "  status       –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  build        –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤"
    echo "  clean        –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"
    echo "  dev          –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo "  prod         –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ"
    echo "  health       –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  --with-nginx     –ó–∞–ø—É—Å–∫ —Å Nginx reverse proxy"
    echo "  --with-redis     –ó–∞–ø—É—Å–∫ —Å Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
    echo "  --dev-tools      –í–∫–ª—é—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (Portainer)"
    echo "  --detach, -d     –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
    echo "  --build          –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"
    echo ""
}

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker –∏ Docker Compose
check_docker() {
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker."
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose."
        exit 1
    fi
}

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
build_command() {
    local base_cmd="docker-compose"
    local profiles=""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—Ü–∏–π
    if [[ "$*" == *"--with-nginx"* ]]; then
        profiles="$profiles --profile with-nginx"
    fi
    
    if [[ "$*" == *"--with-redis"* ]]; then
        profiles="$profiles --profile with-redis"
    fi
    
    if [[ "$*" == *"--dev-tools"* ]]; then
        profiles="$profiles --profile dev-tools"
    fi
    
    echo "$base_cmd $profiles"
}

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
case "$1" in
    "up")
        check_docker
        log "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        
        cmd=$(build_command "$@")
        
        if [[ "$*" == *"--build"* ]]; then
            $cmd up --build ${*/*--build/}
        elif [[ "$*" == *"-d"* ]] || [[ "$*" == *"--detach"* ]]; then
            $cmd up -d
        else
            $cmd up
        fi
        
        if [ $? -eq 0 ]; then
            success "–°–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!"
            echo ""
            echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
            echo "  - –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:3000"
            echo "  - –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: http://localhost:3001"
            echo "  - –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: http://localhost:3002"
            if [[ "$*" == *"--with-nginx"* ]]; then
                echo "  - Nginx Reverse Proxy: http://localhost:80"
            fi
            if [[ "$*" == *"--dev-tools"* ]]; then
                echo "  - Portainer: http://localhost:9000"
            fi
        else
            error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤!"
        fi
        ;;
        
    "down")
        check_docker
        log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        cmd=$(build_command "$@")
        $cmd down
        success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
        ;;
        
    "restart")
        check_docker
        log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        cmd=$(build_command "$@")
        $cmd restart
        success "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!"
        ;;
        
    "logs")
        check_docker
        cmd=$(build_command "$@")
        if [ -z "$2" ]; then
            $cmd logs -f
        else
            $cmd logs -f "$2"
        fi
        ;;
        
    "status")
        check_docker
        log "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
        docker-compose ps
        echo ""
        log "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"
        ;;
        
    "build")
        check_docker
        log "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
        cmd=$(build_command "$@")
        $cmd build --no-cache
        success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã!"
        ;;
        
    "clean")
        check_docker
        log "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
        docker system prune -f
        docker volume prune -f
        success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        ;;
        
    "dev")
        check_docker
        log "–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
        docker-compose -f docker-compose.yml -f docker-compose.dev.yml up ${@:2}
        ;;
        
    "prod")
        check_docker
        log "–ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ..."
        docker-compose -f docker-compose.prod.yml up ${@:2}
        ;;
        
    "health")
        check_docker
        log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤:"
        
        services=("main-app:3000" "notification-service:3001" "analytics-service:3002")
        
        for service in "${services[@]}"; do
            IFS=':' read -r name port <<< "$service"
            if curl -f -s "http://localhost:$port/health" > /dev/null 2>&1 || curl -f -s "http://localhost:$port/api/users" > /dev/null 2>&1; then
                success "$name: Healthy ‚úì"
            else
                error "$name: Unhealthy ‚úó"
            fi
        done
        ;;
        
    "help"|"--help"|"-h"|"")
        show_help
        ;;
        
    *)
        error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        show_help
        exit 1
        ;;
esac