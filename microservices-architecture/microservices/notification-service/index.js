const express = require('express');
const axios = require('axios');
const cors = require('cors');
const cron = require('node-cron');

const app = express();
const PORT = process.env.PORT || 3001;
const MAIN_APP_URL = process.env.MAIN_APP_URL || 'http://localhost:3000';

app.use(cors());
app.use(express.json());

// –•—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
let notifications = [];
let notificationId = 1;

// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const NOTIFICATION_TYPES = {
  SESSION_CREATED: 'session_created',
  SESSION_JOINED: 'session_joined',
  NEW_MESSAGE: 'new_message',
  USER_JOINED: 'user_joined',
  REMINDER: 'reminder'
};

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
app.get('/api/notifications', (req, res) => {
  res.json({
    success: true,
    data: notifications,
    count: notifications.length
  });
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
app.post('/api/notifications', (req, res) => {
  const { type, title, message, userId, metadata = {} } = req.body;
  
  if (!type || !title || !message) {
    return res.status(400).json({
      success: false,
      error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è: type, title, message'
    });
  }

  const notification = {
    id: notificationId++,
    type,
    title,
    message,
    userId,
    metadata,
    timestamp: new Date().toISOString(),
    read: false
  };

  notifications.push(notification);
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  if (notifications.length > 100) {
    notifications = notifications.slice(-100);
  }

  console.log(`üì® –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${title}`);
  
  res.json({
    success: true,
    data: notification
  });
});

// API –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
app.put('/api/notifications/:id/read', (req, res) => {
  const notificationId = parseInt(req.params.id);
  const notification = notifications.find(n => n.id === notificationId);
  
  if (!notification) {
    return res.status(404).json({
      success: false,
      error: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    });
  }
  
  notification.read = true;
  
  res.json({
    success: true,
    data: notification
  });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
app.get('/api/notifications/stats', (req, res) => {
  const stats = {
    total: notifications.length,
    unread: notifications.filter(n => !n.read).length,
    read: notifications.filter(n => n.read).length,
    byType: {}
  };

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
  Object.values(NOTIFICATION_TYPES).forEach(type => {
    stats.byType[type] = notifications.filter(n => n.type === type).length;
  });

  res.json({
    success: true,
    data: stats
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
async function sendToMainApp(endpoint, data) {
  try {
    const response = await axios.post(`${MAIN_APP_URL}${endpoint}`, data, {
      headers: {
        'Content-Type': 'application/json',
        'X-Service': 'notification-service'
      },
      timeout: 5000
    });
    
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${endpoint}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`, error.message);
    return null;
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
cron.schedule('*/5 * * * *', () => {
  const reminder = {
    type: NOTIFICATION_TYPES.REMINDER,
    title: 'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
    message: '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–µ–±–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤!',
    metadata: {
      auto_generated: true,
      cron_time: new Date().toISOString()
    }
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –Ω–∞—à —Å–ø–∏—Å–æ–∫
  const notification = {
    id: notificationId++,
    ...reminder,
    timestamp: new Date().toISOString(),
    read: false
  };

  notifications.push(notification);
  
  if (notifications.length > 100) {
    notifications = notifications.slice(-100);
  }

  console.log('‚è∞ –°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ');
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
cron.schedule('*/2 * * * *', async () => {
  const stats = {
    service: 'notification-service',
    timestamp: new Date().toISOString(),
    notifications_count: notifications.length,
    unread_count: notifications.filter(n => !n.read).length,
    last_notification: notifications.length > 0 ? notifications[notifications.length - 1] : null
  };

  // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  await sendToMainApp('/api/microservice/notification-stats', stats);
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    service: 'notification-service',
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üì® –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîó –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${MAIN_APP_URL}`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
  const startupNotification = {
    id: notificationId++,
    type: 'system',
    title: 'üöÄ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω',
    message: '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
    timestamp: new Date().toISOString(),
    read: false,
    metadata: {
      service: 'notification-service',
      port: PORT
    }
  };
  
  notifications.push(startupNotification);
});