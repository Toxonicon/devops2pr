events {
    worker_connections 1024;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Настройки для production и Docker Swarm
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Логирование
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip сжатие
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=1r/s;

    # Upstream для основного приложения с балансировкой нагрузки
    upstream main-app {
        least_conn;
        server main-app:3000 max_fails=3 fail_timeout=30s;
        # Docker Swarm автоматически балансирует между репликами
        keepalive 32;
    }

    # Upstream для микросервиса уведомлений
    upstream notification-service {
        least_conn;
        server notification-service:3001 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Upstream для микросервиса аналитики
    upstream analytics-service {
        least_conn;
        server analytics-service:3002 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Кеширование
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=app_cache:10m 
                     max_size=1g inactive=60m use_temp_path=off;

    server {
        listen 80;
        server_name tutor.local _;

        # Перенаправление на HTTPS (если SSL настроен)
        # return 301 https://$server_name$request_uri;

        # Основное приложение
        location / {
            limit_req zone=general burst=5 nodelay;
            
            proxy_pass http://main-app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
            
            # Таймауты
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            
            # Буферизация
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        # WebSocket для Socket.IO с Sticky Sessions
        location /socket.io/ {
            proxy_pass http://main-app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Важно для WebSocket в Docker Swarm
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            proxy_connect_timeout 5s;
        }

        # API микросервиса уведомлений
        location /notifications/ {
            limit_req zone=api burst=10 nodelay;
            
            rewrite ^/notifications/(.*)$ /$1 break;
            proxy_pass http://notification-service;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Кеширование для GET запросов
            proxy_cache app_cache;
            proxy_cache_valid 200 5m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            add_header X-Cache-Status $upstream_cache_status;
        }

        # API микросервиса аналитики
        location /analytics/ {
            limit_req zone=api burst=10 nodelay;
            
            rewrite ^/analytics/(.*)$ /$1 break;
            proxy_pass http://analytics-service;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Кеширование для аналитики
            proxy_cache app_cache;
            proxy_cache_valid 200 2m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Nginx status для мониторинга
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.20.0.0/16;  # Docker Swarm network
            deny all;
        }

        # Статические файлы с агрессивным кешированием
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://main-app;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            add_header X-Frame-Options DENY;
            add_header X-XSS-Protection "1; mode=block";
        }

        # Безопасность
        location ~* \.(env|git|svn|htaccess|htpasswd)$ {
            deny all;
            return 404;
        }
    }

    # HTTPS сервер (опционально)
    # server {
    #     listen 443 ssl http2;
    #     server_name tutor.local;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #
    #     # Остальная конфигурация аналогична HTTP серверу
    # }
}