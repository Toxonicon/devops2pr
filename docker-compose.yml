version: '3.8'

services:
  # Основное приложение - точка входа системы
  main-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: tutor-main-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    depends_on:
      notification-service:
        condition: service_healthy
      analytics-service:
        condition: service_healthy
    networks:
      - tutor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { hostname: 'localhost', port: 3000, path: '/api/users', method: 'GET' }; const req = http.request(options, (res) => { if (res.statusCode === 200) { process.exit(0); } else { process.exit(1); } }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.main-app.rule=Host(`localhost`)"
      - "traefik.http.services.main-app.loadbalancer.server.port=3000"

  # Микросервис уведомлений
  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    container_name: tutor-notifications
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MAIN_APP_URL=http://main-app:3000
    networks:
      - tutor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { hostname: 'localhost', port: 3001, path: '/health', method: 'GET' }; const req = http.request(options, (res) => { if (res.statusCode === 200) { process.exit(0); } else { process.exit(1); } }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "service=notification"
      - "version=1.0.0"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Микросервис аналитики
  analytics-service:
    build:
      context: ./microservices/analytics-service
      dockerfile: Dockerfile
    container_name: tutor-analytics
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - MAIN_APP_URL=http://main-app:3000
    networks:
      - tutor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { hostname: 'localhost', port: 3002, path: '/health', method: 'GET' }; const req = http.request(options, (res) => { if (res.statusCode === 200) { process.exit(0); } else { process.exit(1); } }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "service=analytics"
      - "version=1.0.0"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx как reverse proxy (опционально)
  nginx:
    image: nginx:alpine
    container_name: tutor-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      main-app:
        condition: service_healthy
    networks:
      - tutor-network
    restart: unless-stopped
    profiles:
      - "with-nginx"

networks:
  tutor-network:
    driver: bridge
    name: tutor-platform-network
    ipam:
      config:
        - subnet: 172.20.0.0/16